name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # First release, get all commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since previous tag
            CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Save changelog to file
          echo "$CHANGELOG" > CHANGELOG.txt
          
          # Output for GitHub
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            ## Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ## Docker Images
            All service images are available at:
            - `ghcr.io/${{ github.repository }}/timeseries-service:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository }}/forecast-service:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository }}/optimize-service:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository }}/api-gateway:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository }}/scheduler-service:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository }}/webapp:${{ github.ref_name }}`
            
            ## Deployment
            See [INFRASTRUCTURE.md](./INFRASTRUCTURE.md) and [RUNBOOK.md](./RUNBOOK.md) for deployment instructions.
          draft: false
          prerelease: false
          generate_release_notes: true

  build-and-push:
    name: Build and Push Release Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service:
          - name: timeseries-service
            context: services/timeseries-service
          - name: forecast-service
            context: services/forecast-service
          - name: optimize-service
            context: services/optimize-service
          - name: api-gateway
            context: services/api-gateway
          - name: scheduler-service
            context: services/scheduler-service
          - name: webapp
            context: services/webapp

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "major=$(echo $VERSION | cut -d. -f1)" >> $GITHUB_OUTPUT
          echo "minor=$(echo $VERSION | cut -d. -f1-2)" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service.name }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service.name }}:${{ steps.version.outputs.major }}
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service.name }}:${{ steps.version.outputs.minor }}
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service.name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-and-push]
    environment:
      name: production
      url: https://omarino-ems.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying version ${{ github.ref_name }} to production"
          # Add your production deployment script here
          # Examples:
          # - kubectl apply -f k8s/production/
          # - helm upgrade omarino-ems ./charts/omarino-ems --set image.tag=${{ github.ref_name }}
          # - aws ecs update-service ...
          # - terraform apply ...

      - name: Verify deployment
        run: |
          echo "Verifying production deployment..."
          # Add health check verification
          # curl -f https://api.omarino-ems.com/health

      - name: Notify deployment
        if: always()
        run: |
          echo "Production deployment ${{ job.status }}"
          # Add notification (Slack, email, etc.)
