version: '3.8'

# OMARINO-EMS Stack
name: OMARINO-EMS

services:
  # PostgreSQL Database (shared by timeseries-service and scheduler-service)
  postgres:
    image: 192.168.61.21:32768/timescale/timescaledb:latest-pg14
    container_name: omarino-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-omarino}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-omarino_dev_pass}
      POSTGRES_DB: ${POSTGRES_DB:-omarino}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-omarino}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - omarino-network

  # Redis Cache (for optimize-service and api-gateway rate limiting)
  redis:
    image: 192.168.61.21:32768/redis:7-alpine
    container_name: omarino-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-omarino_redis_pass}
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - omarino-network

  # Time Series Service (ASP.NET Core 8)
  timeseries-service:
    image: 192.168.61.21:32768/omarino-ems/timeseries-service:latest
    build:
      context: ./timeseries-service
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    container_name: omarino-timeseries
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:5001
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=omarino_timeseries;Username=${POSTGRES_USER:-omarino};Password=${POSTGRES_PASSWORD:-omarino_dev_pass}
      - Logging__LogLevel__Default=${LOG_LEVEL:-Information}
      - OpenTelemetry__Endpoint=http://tempo:4317
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - omarino-network

  # Forecast Service (Python FastAPI)
  forecast-service:
    image: 192.168.61.21:32768/omarino-ems/forecast-service:latest
    build:
      context: ./forecast-service
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    container_name: omarino-forecast
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DATABASE_URL=postgresql://omarino:omarino_dev_pass@postgres:5432/omarino
      - TIMESERIES_SERVICE_URL=http://timeseries-service:5001
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
    ports:
      - "8001:8001"
    depends_on:
      timeseries-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - omarino-network

  # Optimize Service (Python FastAPI)
  optimize-service:
    image: 192.168.61.21:32768/omarino-ems/optimize-service:latest
    build:
      context: ./optimize-service
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    container_name: omarino-optimize
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DATABASE_URL=postgresql://omarino:omarino_dev_pass@postgres:5432/omarino
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-omarino_redis_pass}
      - TIMESERIES_SERVICE_URL=http://timeseries-service:5001
      - FORECAST_SERVICE_URL=http://forecast-service:8001
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
    ports:
      - "8002:8002"
    depends_on:
      redis:
        condition: service_healthy
      timeseries-service:
        condition: service_healthy
      forecast-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - omarino-network

  # Scheduler Service (ASP.NET Core 8 + Quartz.NET)
  scheduler-service:
    image: 192.168.61.21:32768/omarino-ems/scheduler-service:latest
    build:
      context: ./scheduler-service
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    container_name: omarino-scheduler
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:5003
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=omarino_scheduler;Username=${POSTGRES_USER:-omarino};Password=${POSTGRES_PASSWORD:-omarino_dev_pass}
      - ConnectionStrings__QuartzConnection=Host=postgres;Port=5432;Database=omarino_scheduler;Username=${POSTGRES_USER:-omarino};Password=${POSTGRES_PASSWORD:-omarino_dev_pass}
      - Services__TimeSeriesUrl=http://timeseries-service:5001
      - Services__ForecastUrl=http://forecast-service:8001
      - Services__OptimizeUrl=http://optimize-service:8002
      - Logging__LogLevel__Default=${LOG_LEVEL:-Information}
      - OpenTelemetry__Endpoint=http://tempo:4317
    ports:
      - "5003:5003"
    depends_on:
      postgres:
        condition: service_healthy
      timeseries-service:
        condition: service_healthy
      forecast-service:
        condition: service_healthy
      optimize-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - omarino-network

  # API Gateway (ASP.NET Core 8 + YARP)
  api-gateway:
    image: 192.168.61.21:32768/omarino-ems/api-gateway:latest
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    container_name: omarino-gateway
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:8080
      - Authentication__SecretKey=${JWT_SECRET_KEY:-your-secret-key-change-in-production-min-32-chars}
      - ReverseProxy__Clusters__timeseries-cluster__Destinations__destination1__Address=http://timeseries-service:5001
      - ReverseProxy__Clusters__forecast-cluster__Destinations__destination1__Address=http://forecast-service:8001
      - ReverseProxy__Clusters__optimize-cluster__Destinations__destination1__Address=http://optimize-service:8002
      - ReverseProxy__Clusters__scheduler-cluster__Destinations__destination1__Address=http://scheduler-service:5003
      - Redis__Configuration=redis:6379,password=${REDIS_PASSWORD:-omarino_redis_pass}
      - Logging__LogLevel__Default=${LOG_LEVEL:-Information}
      - OpenTelemetry__Endpoint=http://tempo:4317
    ports:
      - "8081:8080"
    depends_on:
      redis:
        condition: service_healthy
      timeseries-service:
        condition: service_healthy
      forecast-service:
        condition: service_healthy
      optimize-service:
        condition: service_healthy
      scheduler-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - omarino-network

  # Web Application (Next.js 14)
  webapp:
    image: 192.168.61.21:32768/omarino-ems/webapp:latest
    build:
      context: ./webapp
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    container_name: omarino-webapp
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://ems-back.omarino.net}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-change-this-secret-in-production}
    ports:
      - "3000:3000"
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - omarino-network

  # Prometheus (Metrics Collection)
  prometheus:
    image: 192.168.61.21:32768/prom/prometheus:latest
    container_name: omarino-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - omarino-network

  # Grafana (Visualization)
  grafana:
    image: 192.168.61.21:32768/grafana/grafana:latest
    container_name: omarino-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
    ports:
      - "3001:3000"
    volumes:
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - omarino-network

  # Loki (Log Aggregation)
  loki:
    image: 192.168.61.21:32768/grafana/loki:latest
    container_name: omarino-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./observability/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - omarino-network

  # Promtail (Log Collector)
  promtail:
    image: 192.168.61.21:32768/grafana/promtail:latest
    container_name: omarino-promtail
    volumes:
      - ./observability/promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - omarino-network

  # Tempo (Distributed Tracing)
  tempo:
    image: 192.168.61.21:32768/grafana/tempo:latest
    container_name: omarino-tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    ports:
      - "3200:3200"   # tempo
      - "4317:4317"   # otlp grpc
      - "4318:4318"   # otlp http
    volumes:
      - ./observability/tempo/tempo-config.yml:/etc/tempo.yaml
      - tempo_data:/tmp/tempo
    networks:
      - omarino-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  tempo_data:
    driver: local

networks:
  omarino-network:
    driver: bridge
